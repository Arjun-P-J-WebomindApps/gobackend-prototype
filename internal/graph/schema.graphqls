scalar UUID
scalar Time

type User{
    id: UUID!
    name:String!
    username:String!
    email:String!
    password:String!
    mobile:String!
    role:Int!
    isActive:Boolean!
    createdAt:Time!
    updatedAt:Time!
    deletedAt:Time
}

input CreateUserInput{
    name:String!
    username:String!
    email:String!
    password:String!
    mobile:String!
    role:Int!
    isActive:Boolean!
}

type UserOTP{
    id:UUID!
    userId:UUID!
    otpCode:String!
    expiresAt:Time!
    isUsed:Boolean!
    createdAt:Time!
}

input CreateUserOTPInput{
    user_id:UUID!
}

type UserSession{
    session_id:UUID!
    user_id:UUID!
    createdAt:Time!
    expiresAt:Time!
    ipAddress:String!
}

input CreateUserSessionInput{
    user_id:UUID!
}


type Query{
    users:[User!]!
}

type Mutation{
    createUser(input:CreateUserInput!):User!
    createUserOTP(input:CreateUserOTPInput!):UserOTP!
    createUserSession(input:CreateUserSessionInput!):UserSession!
}



package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/Arjun-P-J-WebomindApps/gobackend-prototype/internal/db/models"
	"github.com/Arjun-P-J-WebomindApps/gobackend-prototype/internal/graph/generated"
)

// Image is the resolver for the image field.
func (r *categoryResolver) Image(ctx context.Context, obj *models.Category) (string, error) {
	panic(fmt.Errorf("not implemented: Image - image"))
}

// ModelType is the resolver for the model_type field.
func (r *modelVariantResolver) ModelType(ctx context.Context, obj *models.ModelVariant) (string, error) {
	panic(fmt.Errorf("not implemented: ModelType - model_type"))
}

// ModelImage is the resolver for the model_image field.
func (r *modelVariantResolver) ModelImage(ctx context.Context, obj *models.ModelVariant) (string, error) {
	panic(fmt.Errorf("not implemented: ModelImage - model_image"))
}

// IsActive is the resolver for the is_active field.
func (r *productPartResolver) IsActive(ctx context.Context, obj *models.ProductPart) (bool, error) {
	panic(fmt.Errorf("not implemented: IsActive - is_active"))
}

// Category returns generated.CategoryResolver implementation.
func (r *Resolver) Category() generated.CategoryResolver { return &categoryResolver{r} }

// ModelVariant returns generated.ModelVariantResolver implementation.
func (r *Resolver) ModelVariant() generated.ModelVariantResolver { return &modelVariantResolver{r} }

// ProductPart returns generated.ProductPartResolver implementation.
func (r *Resolver) ProductPart() generated.ProductPartResolver { return &productPartResolver{r} }

type categoryResolver struct{ *Resolver }
type modelVariantResolver struct{ *Resolver }
type productPartResolver struct{ *Resolver }

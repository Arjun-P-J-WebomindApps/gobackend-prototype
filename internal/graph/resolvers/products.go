package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/Arjun-P-J-WebomindApps/gobackend-prototype/internal/db/models"
	"github.com/Arjun-P-J-WebomindApps/gobackend-prototype/internal/graph/generated"
)

// Image is the resolver for the image field.
func (r *categoryResolver) Image(ctx context.Context, obj *models.Category) (string, error) {
	panic(fmt.Errorf("not implemented: Image - image"))
}

// CustomerDesignation is the resolver for the customer_designation field.
func (r *customerResolver) CustomerDesignation(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: CustomerDesignation - customer_designation"))
}

// Address is the resolver for the address field.
func (r *customerResolver) Address(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Address - address"))
}

// Flat is the resolver for the flat field.
func (r *customerResolver) Flat(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Flat - flat"))
}

// Street is the resolver for the street field.
func (r *customerResolver) Street(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Street - street"))
}

// City is the resolver for the city field.
func (r *customerResolver) City(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: City - city"))
}

// State is the resolver for the state field.
func (r *customerResolver) State(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: State - state"))
}

// Pincode is the resolver for the pincode field.
func (r *customerResolver) Pincode(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Pincode - pincode"))
}

// ModelType is the resolver for the model_type field.
func (r *modelVariantResolver) ModelType(ctx context.Context, obj *models.ModelVariant) (string, error) {
	panic(fmt.Errorf("not implemented: ModelType - model_type"))
}

// ModelImage is the resolver for the model_image field.
func (r *modelVariantResolver) ModelImage(ctx context.Context, obj *models.ModelVariant) (string, error) {
	panic(fmt.Errorf("not implemented: ModelImage - model_image"))
}

// IsActive is the resolver for the is_active field.
func (r *productPartResolver) IsActive(ctx context.Context, obj *models.ProductPart) (bool, error) {
	panic(fmt.Errorf("not implemented: IsActive - is_active"))
}

// Category returns generated.CategoryResolver implementation.
func (r *Resolver) Category() generated.CategoryResolver { return &categoryResolver{r} }

// Customer returns generated.CustomerResolver implementation.
func (r *Resolver) Customer() generated.CustomerResolver { return &customerResolver{r} }

// ModelVariant returns generated.ModelVariantResolver implementation.
func (r *Resolver) ModelVariant() generated.ModelVariantResolver { return &modelVariantResolver{r} }

// ProductPart returns generated.ProductPartResolver implementation.
func (r *Resolver) ProductPart() generated.ProductPartResolver { return &productPartResolver{r} }

type categoryResolver struct{ *Resolver }
type customerResolver struct{ *Resolver }
type modelVariantResolver struct{ *Resolver }
type productPartResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *customerResolver) CustomerCompanyName(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: CustomerCompanyName - customer_company_name"))
}
func (r *customerResolver) ContactPerson(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: ContactPerson - contact_person"))
}
func (r *customerResolver) Mobile(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Mobile - mobile"))
}
func (r *customerResolver) Type(ctx context.Context, obj *models.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Type - type"))
}
*/

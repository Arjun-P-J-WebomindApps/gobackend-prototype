// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO user_otps (id,user_id,otp_code,expires_at,is_used,created_at)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, user_id, otp_code, expires_at, is_used, created_at
`

type CreateOTPParams struct {
	ID        int32
	UserID    uuid.UUID
	OtpCode   string
	ExpiresAt time.Time
	IsUsed    sql.NullBool
	CreatedAt sql.NullTime
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (UserOtp, error) {
	row := q.db.QueryRowContext(ctx, createOTP,
		arg.ID,
		arg.UserID,
		arg.OtpCode,
		arg.ExpiresAt,
		arg.IsUsed,
		arg.CreatedAt,
	)
	var i UserOtp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpCode,
		&i.ExpiresAt,
		&i.IsUsed,
		&i.CreatedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (session_id,user_id,created_at,expires_at,ip_address)
VALUES ($1,$2,$3,$4,$5)
RETURNING session_id, user_id, created_at, expires_at, ip_address
`

type CreateSessionParams struct {
	SessionID uuid.UUID
	UserID    uuid.UUID
	CreatedAt sql.NullTime
	ExpiresAt time.Time
	IpAddress string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.CreatedAt,
		arg.ExpiresAt,
		arg.IpAddress,
	)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IpAddress,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id,name,username,email,password,mobile,role,is_active,created_at,updated_at,deleted_at)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) 
RETURNING id, name, username, email, password, mobile, role, is_active, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Name      string
	Username  string
	Email     string
	Password  string
	Mobile    string
	Role      int32
	IsActive  bool
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Mobile,
		arg.Role,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Mobile,
		&i.Role,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, username, email, password, mobile, role, is_active, created_at, updated_at, deleted_at FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Mobile,
			&i.Role,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

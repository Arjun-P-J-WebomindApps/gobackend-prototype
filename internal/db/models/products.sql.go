// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBrand = `-- name: CreateBrand :one


INSERT INTO brands(id,name) VALUES ($1,$2) RETURNING id, name
`

type CreateBrandParams struct {
	ID   uuid.UUID
	Name string
}

// Brands---------------------------------------------------------------
func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRowContext(ctx, createBrand, arg.ID, arg.Name)
	var i Brand
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createCategories = `-- name: CreateCategories :one


INSERT INTO categories(id,name,image) VALUES ($1,$2,$3) RETURNING id, name, image
`

type CreateCategoriesParams struct {
	ID    uuid.UUID
	Name  string
	Image sql.NullString
}

// Categories -------------------------------------------------------------
func (q *Queries) CreateCategories(ctx context.Context, arg CreateCategoriesParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategories, arg.ID, arg.Name, arg.Image)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Image)
	return i, err
}

const createCompanies = `-- name: CreateCompanies :one

INSERT INTO companies (id,name,status) VALUES ($1,$2,$3) RETURNING id, name, status
`

type CreateCompaniesParams struct {
	ID     uuid.UUID
	Name   string
	Status bool
}

// Companies--------------------------------------------------------------
func (q *Queries) CreateCompanies(ctx context.Context, arg CreateCompaniesParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompanies, arg.ID, arg.Name, arg.Status)
	var i Company
	err := row.Scan(&i.ID, &i.Name, &i.Status)
	return i, err
}

const createModel = `-- name: CreateModel :one



INSERT INTO models (id,company_id,name) VALUES ($1,$2,$3) RETURNING id, company_id, name
`

type CreateModelParams struct {
	ID        uuid.UUID
	CompanyID uuid.UUID
	Name      string
}

// Models --------------------------------------------------------------
func (q *Queries) CreateModel(ctx context.Context, arg CreateModelParams) (Model, error) {
	row := q.db.QueryRowContext(ctx, createModel, arg.ID, arg.CompanyID, arg.Name)
	var i Model
	err := row.Scan(&i.ID, &i.CompanyID, &i.Name)
	return i, err
}

const createModelVariant = `-- name: CreateModelVariant :one
INSERT INTO model_variants(id,model_id,model_type,model_image) VALUES($1,$2,$3,$4) RETURNING id, model_id, model_type, model_image
`

type CreateModelVariantParams struct {
	ID         uuid.UUID
	ModelID    uuid.UUID
	ModelType  sql.NullString
	ModelImage sql.NullString
}

func (q *Queries) CreateModelVariant(ctx context.Context, arg CreateModelVariantParams) (ModelVariant, error) {
	row := q.db.QueryRowContext(ctx, createModelVariant,
		arg.ID,
		arg.ModelID,
		arg.ModelType,
		arg.ModelImage,
	)
	var i ModelVariant
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.ModelType,
		&i.ModelImage,
	)
	return i, err
}

const createProductParts = `-- name: CreateProductParts :one


INSERT INTO product_parts(id,company_id,model_id,brand_id,category_id,part_no,is_active,created_at,updated_at) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING id, company_id, model_id, brand_id, category_id, part_no, is_active, created_at, updated_at
`

type CreateProductPartsParams struct {
	ID         uuid.UUID
	CompanyID  uuid.UUID
	ModelID    uuid.UUID
	BrandID    uuid.UUID
	CategoryID uuid.UUID
	PartNo     string
	IsActive   sql.NullBool
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

// Products ----------------------------------------------------------------
func (q *Queries) CreateProductParts(ctx context.Context, arg CreateProductPartsParams) (ProductPart, error) {
	row := q.db.QueryRowContext(ctx, createProductParts,
		arg.ID,
		arg.CompanyID,
		arg.ModelID,
		arg.BrandID,
		arg.CategoryID,
		arg.PartNo,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ProductPart
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ModelID,
		&i.BrandID,
		&i.CategoryID,
		&i.PartNo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBrandByName = `-- name: GetBrandByName :one

SELECT id, name FROM brands WHERE name=$1
`

func (q *Queries) GetBrandByName(ctx context.Context, name string) (Brand, error) {
	row := q.db.QueryRowContext(ctx, getBrandByName, name)
	var i Brand
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCategoriesByName = `-- name: GetCategoriesByName :one
SELECT id, name, image FROM categories WHERE name=$1
`

func (q *Queries) GetCategoriesByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoriesByName, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Image)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT id, name, status FROM companies WHERE name=$1
`

func (q *Queries) GetCompanyByName(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByName, name)
	var i Company
	err := row.Scan(&i.ID, &i.Name, &i.Status)
	return i, err
}

const getModelByName = `-- name: GetModelByName :one
SELECT id, company_id, name FROM models WHERE name=$1
`

func (q *Queries) GetModelByName(ctx context.Context, name string) (Model, error) {
	row := q.db.QueryRowContext(ctx, getModelByName, name)
	var i Model
	err := row.Scan(&i.ID, &i.CompanyID, &i.Name)
	return i, err
}

const getModelVariantsById = `-- name: GetModelVariantsById :one
SELECT id, model_id, model_type, model_image FROM model_variants WHERE model_id=$1
`

func (q *Queries) GetModelVariantsById(ctx context.Context, modelID uuid.UUID) (ModelVariant, error) {
	row := q.db.QueryRowContext(ctx, getModelVariantsById, modelID)
	var i ModelVariant
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.ModelType,
		&i.ModelImage,
	)
	return i, err
}

const getProductByBrandName = `-- name: GetProductByBrandName :one
SELECT id, company_id, model_id, brand_id, category_id, part_no, is_active, created_at, updated_at FROM product_parts WHERE brand_id=$1
`

func (q *Queries) GetProductByBrandName(ctx context.Context, brandID uuid.UUID) (ProductPart, error) {
	row := q.db.QueryRowContext(ctx, getProductByBrandName, brandID)
	var i ProductPart
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ModelID,
		&i.BrandID,
		&i.CategoryID,
		&i.PartNo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductPartsByCategoryId = `-- name: GetProductPartsByCategoryId :one
SELECT id, company_id, model_id, brand_id, category_id, part_no, is_active, created_at, updated_at FROM product_parts WHERE category_id=$1
`

func (q *Queries) GetProductPartsByCategoryId(ctx context.Context, categoryID uuid.UUID) (ProductPart, error) {
	row := q.db.QueryRowContext(ctx, getProductPartsByCategoryId, categoryID)
	var i ProductPart
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ModelID,
		&i.BrandID,
		&i.CategoryID,
		&i.PartNo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductPartsByModelId = `-- name: GetProductPartsByModelId :one
SELECT id, company_id, model_id, brand_id, category_id, part_no, is_active, created_at, updated_at FROM product_parts WHERE model_id=$1
`

func (q *Queries) GetProductPartsByModelId(ctx context.Context, modelID uuid.UUID) (ProductPart, error) {
	row := q.db.QueryRowContext(ctx, getProductPartsByModelId, modelID)
	var i ProductPart
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ModelID,
		&i.BrandID,
		&i.CategoryID,
		&i.PartNo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductPartsByPartNo = `-- name: GetProductPartsByPartNo :one
SELECT id, company_id, model_id, brand_id, category_id, part_no, is_active, created_at, updated_at FROM product_parts WHERE part_no=$1
`

func (q *Queries) GetProductPartsByPartNo(ctx context.Context, partNo string) (ProductPart, error) {
	row := q.db.QueryRowContext(ctx, getProductPartsByPartNo, partNo)
	var i ProductPart
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ModelID,
		&i.BrandID,
		&i.CategoryID,
		&i.PartNo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductPartsByProductId = `-- name: GetProductPartsByProductId :one
SELECT id, company_id, model_id, brand_id, category_id, part_no, is_active, created_at, updated_at FROM product_parts WHERE company_id=$1
`

func (q *Queries) GetProductPartsByProductId(ctx context.Context, companyID uuid.UUID) (ProductPart, error) {
	row := q.db.QueryRowContext(ctx, getProductPartsByProductId, companyID)
	var i ProductPart
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ModelID,
		&i.BrandID,
		&i.CategoryID,
		&i.PartNo,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

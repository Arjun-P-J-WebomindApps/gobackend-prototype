// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: typesense.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getProductTableMetaData = `-- name: GetProductTableMetaData :many
SELECT 
    pp.id,
    co.name AS company,
    m.name AS model,
    mv.model_type,
    b.name AS brand,
    c.name AS category,
    pp.part_no
FROM product_parts pp
    JOIN companies co on co.id=pp.company_id
    JOIN models m on m.id = pp.model_id
    LEFT JOIN model_variants mv ON mv.model_id=m.id
    JOIN brands b ON b.id = pp.brand_id
    JOIN categories c ON c.id =  pp.category_id
`

type GetProductTableMetaDataRow struct {
	ID        uuid.UUID
	Company   string
	Model     string
	ModelType sql.NullString
	Brand     string
	Category  string
	PartNo    string
}

func (q *Queries) GetProductTableMetaData(ctx context.Context) ([]GetProductTableMetaDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getProductTableMetaData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductTableMetaDataRow
	for rows.Next() {
		var i GetProductTableMetaDataRow
		if err := rows.Scan(
			&i.ID,
			&i.Company,
			&i.Model,
			&i.ModelType,
			&i.Brand,
			&i.Category,
			&i.PartNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
